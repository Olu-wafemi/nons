"""
Django settings for wellness_flow project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

from datetime import timedelta
from envyaml import EnvYAML

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_PATH = str(BASE_DIR) + "/confidential/defaults.yaml"
local = os.environ.get("WELLNESSFLOW_ENV", "local") == "local"  # if we are local, use yaml,
env = os.environ  # if not use environment variables, local is default
if local:
    env = EnvYAML(ENV_PATH)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_gep2+waqaf5$jy+6yf4@45olo$yzhoxe#7%l2@6m0kr5t@_+f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'onboarding',
    'healthapp',
    'calendarapi'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'wellness_flow.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wellness_flow.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AWS Access Settings
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID") if os.getenv("AWS_ACCESS_KEY_ID") else env["AWS_ACCESS_KEY_ID"]
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY") if os.getenv("AWS_SECRET_ACCESS_KEY") else env["AWS_SECRET_ACCESS_KEY"]

# AWS Cognito Settings
COGNITO_AWS_REGION = os.getenv("COGNITO_AWS_REGION") if os.getenv("COGNITO_AWS_REGION") else env["COGNITO_AWS_REGION"]
COGNITO_USER_POOL_ID = os.getenv("COGNITO_USER_POOL_ID") if os.getenv("COGNITO_USER_POOL_ID") else env["COGNITO_USER_POOL_ID"]
COGNITO_AUDIENCE = os.getenv("COGNITO_AUDIENCE") if os.getenv("COGNITO_AUDIENCE") else env["COGNITO_AUDIENCE"]

# FITBIT Access Settings
FITBIT_CLIENT_ID = os.getenv("FITBIT_CLIENT_ID") if os.getenv("FITBIT_CLIENT_ID") else env["FITBIT_CLIENT_ID"]
FITBIT_CLIENT_SECRET = os.getenv("FITBIT_CLIENT_SECRET") if os.getenv("FITBIT_CLIENT_SECRET") else env["FITBIT_CLIENT_SECRET"]
FITBIT_AUTH_URI = os.getenv("FITBIT_AUTH_URI") if os.getenv("FITBIT_AUTH_URI") else env["FITBIT_AUTH_URI"]
FITBIT_TOKEN_REQUEST = os.getenv("FITBIT_TOKEN_REQUEST") if os.getenv("FITBIT_TOKEN_REQUEST") else env["FITBIT_TOKEN_REQUEST"]
FITBIT_REDIRECT_URI = os.getenv("FITBIT_REDIRECT_URI") if os.getenv("FITBIT_REDIRECT_URI") else env["FITBIT_REDIRECT_URI"]
FITBIT_SCOPE = os.getenv("FITBIT_SCOPE") if os.getenv("FITBIT_SCOPE") else env["FITBIT_SCOPE"]

# GCP Access Settings
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID") if os.getenv("GOOGLE_CLIENT_ID") else env["GOOGLE_CLIENT_ID"]
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET") if os.getenv("GOOGLE_CLIENT_SECRET") else env["GOOGLE_CLIENT_SECRET"]
GOOGLE_TOKEN_URL = os.getenv("GOOGLE_TOKEN_URL") if os.getenv("GOOGLE_TOKEN_URL") else env["GOOGLE_TOKEN_URL"]
GOOGLE_AUTHORIZATION_URL = os.getenv("GOOGLE_AUTHORIZATION_URL") if os.getenv("GOOGLE_AUTHORIZATION_URL") else env["GOOGLE_AUTHORIZATION_URL"]
GOOGLE_REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI") if os.getenv("GOOGLE_REDIRECT_URI") else env["GOOGLE_REDIRECT_URI"]

# Azure Access Settings
OUTLOOK_CLIENT_ID = os.getenv("OUTLOOK_CLIENT_ID") if os.getenv("OUTLOOK_CLIENT_ID") else env["OUTLOOK_CLIENT_ID"]
OUTLOOK_REDIRECT_URI = os.getenv("OUTLOOK_REDIRECT_URI") if os.getenv("OUTLOOK_REDIRECT_URI") else env["OUTLOOK_REDIRECT_URI"]
OUTLOOK_AUTHORIZATION_URL = os.getenv("OUTLOOK_AUTHORIZATION_URL") if os.getenv("OUTLOOK_AUTHORIZATION_URL") else env["OUTLOOK_AUTHORIZATION_URL"]

# Scopes requested from Google and Outlook
GOOGLE_SCOPE = [os.getenv("GOOGLE_SCOPE") if os.getenv("GOOGLE_SCOPE") else env["GOOGLE_SCOPE"]]
OUTLOOK_SCOPE = [os.getenv("OUTLOOK_SCOPE") if os.getenv("OUTLOOK_SCOPE") else env["OUTLOOK_SCOPE"]]